<!DOCTYPE hibernate-configuration PUBLIC 	"-//Hibernate/Hibernate Configuration DTD//EN"	"http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">
<hibernate-configuration>	<session-factory> <!-- session-factory Name required when putting a factory in JNDI tree to 			secure it a single creation -->		<property name="connection.driver_class">com.mysql.jdbc.Driver</property>		<property name="connection.url">jdbc:mysql://localhost:3306/hib3_prac</property>		<property name="connection.username">root</property>		<property name="connection.password">root</property>		<property name="connection.pool_size">1</property>		<property name="dialect">org.hibernate.dialect.MySQLDialect</property>		<property name="current_session_context_class">thread</property> <!-- jta (org.hibernate.context.JTASessionContext) | thread (org.hibernate.context.ThreadLocalSessionContext) 			| managed (org.hibernate.context.ManagedSessionContext) | <custom>.Class -->		<!-- When you use 'thread' getCurrentSession() will open/close(after commit) 			the session automatically. When you use 'managed' getCurrentSession() will 			not open/close(after commit) the session automatically and you will have 			to manually open/close the session through getOpenSession(); also you are 			responsible to bind and unbind a Session instance with static methods ManagedSessionContext.bind(session)/unbind(session) 			on this class, it does never open, flush, or close a Session. 'thread' and 			'jta' implementations provide a "one session - one database transaction" 			programming model, also known and used as session-per-request. -->		<property name="cache.provider_class">org.hibernate.cache.NoCacheProvider</property> <!-- NoCacheProvider (transaction-level cache, Session level, First level 			cache) | <custom>.Class (JVM-level cache, SessionFactory level, Second level 			cache) -->		<property name="show_sql">true</property> <!-- true | false -->		<property name="hbm2ddl.auto">create</property><!-- validate | update | create 			| create-drop -->		<mapping resource="com/hibernatepractice/domain/User.hbm.xml" /><!-- 			Although the name of the hbm file and its path do not have meaning, its location 			in CLASSPATH does. -->	</session-factory></hibernate-configuration>